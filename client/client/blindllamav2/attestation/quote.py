import tempfile

import yaml
from pydantic.dataclasses import dataclass

from blindllamav2.attestation.errors import AttestationError

from ..utils import run_command
from .tpm import Sha256BankPCRMeasurements


@dataclass
class Quote:
    """A dataclass representing a TPM quote.

    Attributes:
        message (bytes): The quoted data.

        signature (bytes): The signature of the quote.

        pcr (bytes): The Platform Configuration Registers (PCR) values that were quoted. These
                     values represent a cryptographically secure summary of the system state at
                     the time the quote was generated.
    """

    message: bytes
    signature: bytes
    pcr: bytes


@dataclass
class QuotedMeasurements:
    pcrs: Sha256BankPCRMeasurements


# def test_sample_quote():
#     quote = {
#         'message':
#         'signature':
#         'pcr':
#     }
#     verify_quote(sample_quote, trusted_pub_key_pem=sample_trusted_key_pem)


def hazmat_read_quote(quote: Quote) -> QuotedMeasurements:
    """Read quote content without checking its authenticity first.

    This function should only be used for debugging. You should
    generally use verify_quote instead.

    Args:
        quote (Quote): The quote to be read
    Returns:
        QuotedMeasurements: An instance of `QuotedMeasurements` containing the state of the PCRs "endorsed" by the quote.
    """
    # Uses the tpm2_checkquote tool
    with tempfile.NamedTemporaryFile() as quote_msg_file, tempfile.NamedTemporaryFile() as quote_sig_file, tempfile.NamedTemporaryFile() as quote_pcr_file, tempfile.NamedTemporaryFile(
        "w+t"
    ) as ak_pub_key_file:
        dummy_pub_key_pem = ""
        quote_msg_file.write(quote.message)
        quote_msg_file.flush()

        quote_sig_file.write(quote.signature)
        quote_sig_file.flush()

        quote_pcr_file.write(quote.pcr)
        quote_pcr_file.flush()

        ak_pub_key_file.write(dummy_pub_key_pem)
        ak_pub_key_file.flush()

        try:
            run_command(
                "tpm2_checkquote",
                "--public",
                ak_pub_key_file.name,
                "--message",
                quote_msg_file.name,
                "--pcr",
                quote_pcr_file.name,
                "--signature",
                quote_sig_file.name,
            )
            raise AssertionError(
                "The command above should always raise a RuntimeError since we passed a dummy public key."
            )
        except RuntimeError as e:
            tpm2_checkquote_output = e.__cause__.stdout  # type: ignore

        # Note yaml.BaseLoader is a safe loader. It will not execute arbitrary Python code
        # even if it loads malicious input
        quoted_measurements = yaml.load(tpm2_checkquote_output, Loader=yaml.BaseLoader)
        quoted_measurements["pcrs"]["sha256"] = {
            int(k): v.lower().removeprefix("0x")
            for k, v in quoted_measurements["pcrs"]["sha256"].items()
        }
        quoted_measurements_parsed = QuotedMeasurements(**quoted_measurements)

        return quoted_measurements_parsed


def verify_quote(quote: Quote, trusted_pub_key_pem: str) -> QuotedMeasurements:
    """Verifies a TPM quote.

    This function uses the provided public key to verify the authenticity of a quote generated by a TPM.

    Args:
        quote (Quote): The quote to be verified
        trusted_pub_key_pem (str): The trusted public key in PEM format to verify the quote's signature.

    Returns:
        QuotedMeasurements: An instance of `QuotedMeasurements` containing the state of the PCRs endorsed by the quote.

    Raises:
        AttestationError: If the quote verification fails.
    """
    # Uses the tpm2_checkquote tool
    with tempfile.NamedTemporaryFile() as quote_msg_file, tempfile.NamedTemporaryFile() as quote_sig_file, tempfile.NamedTemporaryFile() as quote_pcr_file, tempfile.NamedTemporaryFile(
        "w+t"
    ) as ak_pub_key_file:
        quote_msg_file.write(quote.message)
        quote_msg_file.flush()

        quote_sig_file.write(quote.signature)
        quote_sig_file.flush()

        quote_pcr_file.write(quote.pcr)
        quote_pcr_file.flush()

        ak_pub_key_file.write(trusted_pub_key_pem)
        ak_pub_key_file.flush()

        try:
            tpm2_checkquote_output = run_command(
                "tpm2_checkquote",
                "--public",
                ak_pub_key_file.name,
                "--message",
                quote_msg_file.name,
                "--pcr",
                quote_pcr_file.name,
                "--signature",
                quote_sig_file.name,
            )
        except RuntimeError as e:
            raise AttestationError("Invalid quote") from e

        # Note yaml.BaseLoader is a safe loader. It will not execute arbitrary Python code
        # even if it loads malicious input
        quoted_measurements = yaml.load(tpm2_checkquote_output, Loader=yaml.BaseLoader)
        quoted_measurements["pcrs"]["sha256"] = {
            int(k): v.lower().removeprefix("0x")
            for k, v in quoted_measurements["pcrs"]["sha256"].items()
        }
        quoted_measurements_parsed = QuotedMeasurements(**quoted_measurements)

        return quoted_measurements_parsed
